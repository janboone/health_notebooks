#+TITLE: Plotting health data with python
#+AUTHOR: Jan Boone

In this notebook we use publicly available health care data to illustrate the use of some python libraries. We will plot health care expenditure per municipality and how health care varies with age. In the process you will see how libraries like pandas and matplotlib work.

* Health care expenditures per municipality

We consider three datasets related to Dutch health care expenditure:
+ health care spending at the level of the municipality
+ health care spending at the level of 3 digit postal codes
+ distributions of health care expenditure per age group

Some institutional background:
+ in the Netherlands health insurance is mandatory
+ people aged 18 or older face a deductible of 365 euros in 2014; no deductible for people below 18
+ the deductible applies to a number of cost categories in the "basic packages"; see below
+ people can --voluntarily-- increase their deductible with 100, 200, 300, 400 or 500 euro; but our data has no information on this


** relation costs per head and number of citizens

We start with health care data on the level of municipalities.

The following code block loads the data. We use data from [[http://www.vektis.nl/index.php/vektis-open-data][Vektis]]. We import the data, which is a 'csv' file with ";" as separator between columns. We also import the pandas library.

Then we inspect the first ten rows of our data set.

#+BEGIN_SRC ipython
import pandas as pd
df_gemeente = pd.read_csv('Vektis_Open_Databestand_Zorgverzekeringswet_2014_-_gemeente.csv', sep = ';')
import matplotlib.pyplot as plt
%matplotlib inline
df_gemeente.head(10)
#+END_SRC

#+RESULTS:
:RESULTS:

  GESLACHT LEEFTIJDSKLASSE   GEMEENTENAAM  AANTAL_BSN  AANTAL_VERZEKERDEJAREN  \
0      NaN             NaN            NaN      298383               185664.92   
1        M   0 t/m  4 jaar    AA EN HUNZE         507                  468.83   
2        M   0 t/m  4 jaar        AALBURG         428                  387.28   
3        M   0 t/m  4 jaar       AALSMEER         876                  790.65   
4        M   0 t/m  4 jaar         AALTEN         667                  600.00   
5        M   0 t/m  4 jaar  ACHTKARSPELEN         810                  737.03   
6        M   0 t/m  4 jaar   ALBLASSERDAM         637                  561.21   
7        M   0 t/m  4 jaar  ALBRANDSWAARD         735                  663.22   
8        M   0 t/m  4 jaar        ALKMAAR        2967                 2660.93   
9        M   0 t/m  4 jaar         ALMELO        1906                 1714.63   

   KOSTEN_MEDISCH_SPECIALISTISCHE_ZORG  KOSTEN_FARMACIE  \
0                          48661669.94       9219422.33   
1                            473370.77         43305.49   
2                            340442.37         23395.86   
3                            932841.57         54597.52   
4                            515879.78         43516.71   
5                            766456.80         88084.16   
6                           1252440.29        140225.60   
7                            927635.48        114174.07   
8                           4005510.06        258936.51   
9                           3518922.31        254976.19   

   KOSTEN_TWEEDELIJNS_GGZ  KOSTEN_HUISARTS_INSCHRIJFTARIEF  \
0              7475481.90                       4092492.35   
1                14056.81                         26239.56   
2                 5555.83                         21673.15   
3                34355.66                         43971.27   
4                 2404.19                         33749.10   
5                 6681.81                         41477.79   
6                 9715.96                         30705.39   
7                 2043.52                         37028.38   
8                22599.87                        147227.49   
9                87437.11                         96757.71   

   KOSTEN_HUISARTS_CONSULT      ...        KOSTEN_PARAMEDISCHE_ZORG_OVERIG  \
0               1388439.07      ...                              290539.66   
1                 12829.29      ...                               13783.67   
2                  9417.98      ...                               15297.60   
3                 22413.37      ...                               14105.95   
4                 18472.64      ...                               31816.27   
5                 19157.34      ...                               30454.49   
6                 15936.39      ...                               19202.75   
7                 21611.09      ...                               30449.94   
8                 71141.10      ...                               67205.26   
9                 51693.62      ...                               81595.14   

   KOSTEN_ZIEKENVERVOER_ZITTEND  KOSTEN_ZIEKENVERVOER_LIGGEND  \
0                     210313.33                    1398151.05   
1                        638.08                       5004.86   
2                        315.06                       6155.09   
3                          0.00                      20465.44   
4                       1173.82                       6282.28   
5                        204.30                      17011.84   
6                          0.00                      11421.05   
7                          0.00                      13027.62   
8                       4086.51                      70806.48   
9                       7742.31                      32328.75   

   KOSTEN_KRAAMZORG  KOSTEN_VERLOSKUNDIGE_ZORG  \
0         1286545.5                 1072906.37   
1               0.0                       0.00   
2               0.0                       0.00   
3               0.0                       0.00   
4               0.0                       0.00   
5               0.0                       0.00   
6               0.0                       0.00   
7               0.0                       0.00   
8               0.0                       0.00   
9               0.0                       0.00   

   KOSTEN_GENERALISTISCHE_BASIS_GGZ  KOSTEN_GRENSOVERSCHRIJDENDE_ZORG  \
0                         490222.49                       21946526.34   
1                              0.00                           2571.36   
2                              0.00                            186.08   
3                            157.44                           1743.72   
4                           1422.67                             62.75   
5                              0.00                            206.11   
6                              0.00                            662.75   
7                              0.00                           1422.76   
8                            168.55                           7153.37   
9                           3777.82                           2492.23   

   KOSTEN_EERSTELIJNS_ONDERSTEUNING  KOSTEN_GERIATRISCHE_REVALIDATIEZORG  \
0                            523.35                            351533.29   
1                             31.05                                 0.00   
2                              5.40                                 0.00   
3                             12.60                                 0.00   
4                              3.60                                 0.00   
5                            955.80                                 0.00   
6                             11.25                                 0.00   
7                              7.20                                 0.00   
8                             36.90                                 0.00   
9                             27.45                                 0.00   

   KOSTEN_OVERIG  
0      849751.44  
1         186.03  
2         135.30  
3       13285.23  
4         107.40  
5         453.66  
6         165.60  
7         368.37  
8        2707.21  
9         682.51  

[10 rows x 24 columns]
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>GESLACHT</th>
      <th>LEEFTIJDSKLASSE</th>
      <th>GEMEENTENAAM</th>
      <th>AANTAL_BSN</th>
      <th>AANTAL_VERZEKERDEJAREN</th>
      <th>KOSTEN_MEDISCH_SPECIALISTISCHE_ZORG</th>
      <th>KOSTEN_FARMACIE</th>
      <th>KOSTEN_TWEEDELIJNS_GGZ</th>
      <th>KOSTEN_HUISARTS_INSCHRIJFTARIEF</th>
      <th>KOSTEN_HUISARTS_CONSULT</th>
      <th>...</th>
      <th>KOSTEN_PARAMEDISCHE_ZORG_OVERIG</th>
      <th>KOSTEN_ZIEKENVERVOER_ZITTEND</th>
      <th>KOSTEN_ZIEKENVERVOER_LIGGEND</th>
      <th>KOSTEN_KRAAMZORG</th>
      <th>KOSTEN_VERLOSKUNDIGE_ZORG</th>
      <th>KOSTEN_GENERALISTISCHE_BASIS_GGZ</th>
      <th>KOSTEN_GRENSOVERSCHRIJDENDE_ZORG</th>
      <th>KOSTEN_EERSTELIJNS_ONDERSTEUNING</th>
      <th>KOSTEN_GERIATRISCHE_REVALIDATIEZORG</th>
      <th>KOSTEN_OVERIG</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>298383</td>
      <td>185664.92</td>
      <td>48661669.94</td>
      <td>9219422.33</td>
      <td>7475481.90</td>
      <td>4092492.35</td>
      <td>1388439.07</td>
      <td>...</td>
      <td>290539.66</td>
      <td>210313.33</td>
      <td>1398151.05</td>
      <td>1286545.5</td>
      <td>1072906.37</td>
      <td>490222.49</td>
      <td>21946526.34</td>
      <td>523.35</td>
      <td>351533.29</td>
      <td>849751.44</td>
    </tr>
    <tr>
      <th>1</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>AA EN HUNZE</td>
      <td>507</td>
      <td>468.83</td>
      <td>473370.77</td>
      <td>43305.49</td>
      <td>14056.81</td>
      <td>26239.56</td>
      <td>12829.29</td>
      <td>...</td>
      <td>13783.67</td>
      <td>638.08</td>
      <td>5004.86</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>2571.36</td>
      <td>31.05</td>
      <td>0.00</td>
      <td>186.03</td>
    </tr>
    <tr>
      <th>2</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>AALBURG</td>
      <td>428</td>
      <td>387.28</td>
      <td>340442.37</td>
      <td>23395.86</td>
      <td>5555.83</td>
      <td>21673.15</td>
      <td>9417.98</td>
      <td>...</td>
      <td>15297.60</td>
      <td>315.06</td>
      <td>6155.09</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>186.08</td>
      <td>5.40</td>
      <td>0.00</td>
      <td>135.30</td>
    </tr>
    <tr>
      <th>3</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>AALSMEER</td>
      <td>876</td>
      <td>790.65</td>
      <td>932841.57</td>
      <td>54597.52</td>
      <td>34355.66</td>
      <td>43971.27</td>
      <td>22413.37</td>
      <td>...</td>
      <td>14105.95</td>
      <td>0.00</td>
      <td>20465.44</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>157.44</td>
      <td>1743.72</td>
      <td>12.60</td>
      <td>0.00</td>
      <td>13285.23</td>
    </tr>
    <tr>
      <th>4</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>AALTEN</td>
      <td>667</td>
      <td>600.00</td>
      <td>515879.78</td>
      <td>43516.71</td>
      <td>2404.19</td>
      <td>33749.10</td>
      <td>18472.64</td>
      <td>...</td>
      <td>31816.27</td>
      <td>1173.82</td>
      <td>6282.28</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>1422.67</td>
      <td>62.75</td>
      <td>3.60</td>
      <td>0.00</td>
      <td>107.40</td>
    </tr>
    <tr>
      <th>5</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>ACHTKARSPELEN</td>
      <td>810</td>
      <td>737.03</td>
      <td>766456.80</td>
      <td>88084.16</td>
      <td>6681.81</td>
      <td>41477.79</td>
      <td>19157.34</td>
      <td>...</td>
      <td>30454.49</td>
      <td>204.30</td>
      <td>17011.84</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>206.11</td>
      <td>955.80</td>
      <td>0.00</td>
      <td>453.66</td>
    </tr>
    <tr>
      <th>6</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>ALBLASSERDAM</td>
      <td>637</td>
      <td>561.21</td>
      <td>1252440.29</td>
      <td>140225.60</td>
      <td>9715.96</td>
      <td>30705.39</td>
      <td>15936.39</td>
      <td>...</td>
      <td>19202.75</td>
      <td>0.00</td>
      <td>11421.05</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>662.75</td>
      <td>11.25</td>
      <td>0.00</td>
      <td>165.60</td>
    </tr>
    <tr>
      <th>7</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>ALBRANDSWAARD</td>
      <td>735</td>
      <td>663.22</td>
      <td>927635.48</td>
      <td>114174.07</td>
      <td>2043.52</td>
      <td>37028.38</td>
      <td>21611.09</td>
      <td>...</td>
      <td>30449.94</td>
      <td>0.00</td>
      <td>13027.62</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1422.76</td>
      <td>7.20</td>
      <td>0.00</td>
      <td>368.37</td>
    </tr>
    <tr>
      <th>8</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>ALKMAAR</td>
      <td>2967</td>
      <td>2660.93</td>
      <td>4005510.06</td>
      <td>258936.51</td>
      <td>22599.87</td>
      <td>147227.49</td>
      <td>71141.10</td>
      <td>...</td>
      <td>67205.26</td>
      <td>4086.51</td>
      <td>70806.48</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>168.55</td>
      <td>7153.37</td>
      <td>36.90</td>
      <td>0.00</td>
      <td>2707.21</td>
    </tr>
    <tr>
      <th>9</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>ALMELO</td>
      <td>1906</td>
      <td>1714.63</td>
      <td>3518922.31</td>
      <td>254976.19</td>
      <td>87437.11</td>
      <td>96757.71</td>
      <td>51693.62</td>
      <td>...</td>
      <td>81595.14</td>
      <td>7742.31</td>
      <td>32328.75</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>3777.82</td>
      <td>2492.23</td>
      <td>27.45</td>
      <td>0.00</td>
      <td>682.51</td>
    </tr>
  </tbody>
</table>
<p>10 rows × 24 columns</p>
</div>
#+END_EXPORT
:END:

From the previous lecture, we have the following function to get the data into shape.

#+BEGIN_SRC ipython
cost_categories_under_deductible = ['KOSTEN_MEDISCH_SPECIALISTISCHE_ZORG', 'KOSTEN_MONDZORG', 'KOSTEN_FARMACIE', 'KOSTEN_HULPMIDDELEN', 'KOSTEN_PARAMEDISCHE_ZORG_FYSIOTHERAPIE', 'KOSTEN_PARAMEDISCHE_ZORG_OVERIG', 'KOSTEN_ZIEKENVERVOER_ZITTEND', 'KOSTEN_ZIEKENVERVOER_LIGGEND', 'KOSTEN_GRENSOVERSCHRIJDENDE_ZORG', 'KOSTEN_GERIATRISCHE_REVALIDATIEZORG', 'KOSTEN_OVERIG']

def get_data_into_shape(df):
    df['health_expenditure_under_deductible'] = df[cost_categories_under_deductible].sum(axis=1)
    df = df.rename_axis({
        'GESLACHT':'sex',
        'LEEFTIJDSKLASSE':'age',
        'GEMEENTENAAM':'MUNICIPALITY',
        'AANTAL_BSN':'number_citizens',
        'KOSTEN_MEDISCH_SPECIALISTISCHE_ZORG':'hospital_care',
        'KOSTEN_FARMACIE':'pharmaceuticals',
        'KOSTEN_TWEEDELIJNS_GGZ':'mental_care',
        'KOSTEN_HUISARTS_INSCHRIJFTARIEF':'GP_capitation',
        'KOSTEN_HUISARTS_CONSULT':'GP_fee_for_service',
        'KOSTEN_HUISARTS_OVERIG':'GP_other',
        'KOSTEN_MONDZORG':'dental care',
        'KOSTEN_PARAMEDISCHE_ZORG_FYSIOTHERAPIE':'physiotherapy',
        'KOSTEN_KRAAMZORG':'maternity_care',
        'KOSTEN_VERLOSKUNDIGE_ZORG':'obstetrics'
    }, axis='columns')
    df.drop(['AANTAL_VERZEKERDEJAREN',
             'KOSTEN_HULPMIDDELEN',
             'KOSTEN_PARAMEDISCHE_ZORG_OVERIG',
             'KOSTEN_ZIEKENVERVOER_ZITTEND',
             'KOSTEN_ZIEKENVERVOER_LIGGEND',
             'KOSTEN_GRENSOVERSCHRIJDENDE_ZORG',
             'KOSTEN_GERIATRISCHE_REVALIDATIEZORG',
             'KOSTEN_OVERIG',
             'KOSTEN_GENERALISTISCHE_BASIS_GGZ',
             'KOSTEN_EERSTELIJNS_ONDERSTEUNING'],inplace=True,axis=1)
    df.drop(df.index[[0]], inplace=True)
    df['sex'] = df['sex'].astype('category')
    df['age'] = df['age'].astype('category')
    return df
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

Then we get the data into shape using the function just defined:

#+BEGIN_SRC ipython
df_gemeente = get_data_into_shape(df_gemeente)
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

#+END_SRC

In the previous lecture, we selected rows from a dataframe using ~loc~. E.g. we can select the municipality Breda and people between 10 and 14 years old, as follows:

#+BEGIN_SRC ipython
df_gemeente.loc[(df_gemeente.MUNICIPALITY == 'BREDA') & (df_gemeente['age'] == '10 t/m 14 jaar')]
#+END_SRC

#+RESULTS:
:RESULTS:

     sex             age MUNICIPALITY  number_citizens  hospital_care  \
832    M  10 t/m 14 jaar        BREDA             5206     2215947.11   
8234   V  10 t/m 14 jaar        BREDA             4915     1425550.97   

      pharmaceuticals  mental_care  GP_capitation  GP_fee_for_service  \
832         381799.92    920439.00      301494.04             88705.2   
8234        255232.99    564944.21      284269.76             91482.6   

       GP_other  dental care  physiotherapy  maternity_care  obstetrics  \
832   142402.72    677836.15      187429.87             0.0         0.0   
8234  134486.26    620303.59      202916.68             0.0         0.0   

      health_expenditure_under_deductible  
832                            3756487.05  
8234                           2795294.25  
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>sex</th>
      <th>age</th>
      <th>MUNICIPALITY</th>
      <th>number_citizens</th>
      <th>hospital_care</th>
      <th>pharmaceuticals</th>
      <th>mental_care</th>
      <th>GP_capitation</th>
      <th>GP_fee_for_service</th>
      <th>GP_other</th>
      <th>dental care</th>
      <th>physiotherapy</th>
      <th>maternity_care</th>
      <th>obstetrics</th>
      <th>health_expenditure_under_deductible</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>832</th>
      <td>M</td>
      <td>10 t/m 14 jaar</td>
      <td>BREDA</td>
      <td>5206</td>
      <td>2215947.11</td>
      <td>381799.92</td>
      <td>920439.00</td>
      <td>301494.04</td>
      <td>88705.2</td>
      <td>142402.72</td>
      <td>677836.15</td>
      <td>187429.87</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>3756487.05</td>
    </tr>
    <tr>
      <th>8234</th>
      <td>V</td>
      <td>10 t/m 14 jaar</td>
      <td>BREDA</td>
      <td>4915</td>
      <td>1425550.97</td>
      <td>255232.99</td>
      <td>564944.21</td>
      <td>284269.76</td>
      <td>91482.6</td>
      <td>134486.26</td>
      <td>620303.59</td>
      <td>202916.68</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>2795294.25</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:

Pandas also has a `query` method which tends to be easier to read:

#+BEGIN_SRC ipython
df_gemeente.query('MUNICIPALITY=="BREDA" & age=="10 t/m 14 jaar"')
#+END_SRC

#+RESULTS:
:RESULTS:

     sex             age MUNICIPALITY  number_citizens  hospital_care  \
832    M  10 t/m 14 jaar        BREDA             5206     2215947.11   
8234   V  10 t/m 14 jaar        BREDA             4915     1425550.97   

      pharmaceuticals  mental_care  GP_capitation  GP_fee_for_service  \
832         381799.92    920439.00      301494.04             88705.2   
8234        255232.99    564944.21      284269.76             91482.6   

       GP_other  dental care  physiotherapy  maternity_care  obstetrics  \
832   142402.72    677836.15      187429.87             0.0         0.0   
8234  134486.26    620303.59      202916.68             0.0         0.0   

      health_expenditure_under_deductible  
832                            3756487.05  
8234                           2795294.25  
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>sex</th>
      <th>age</th>
      <th>MUNICIPALITY</th>
      <th>number_citizens</th>
      <th>hospital_care</th>
      <th>pharmaceuticals</th>
      <th>mental_care</th>
      <th>GP_capitation</th>
      <th>GP_fee_for_service</th>
      <th>GP_other</th>
      <th>dental care</th>
      <th>physiotherapy</th>
      <th>maternity_care</th>
      <th>obstetrics</th>
      <th>health_expenditure_under_deductible</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>832</th>
      <td>M</td>
      <td>10 t/m 14 jaar</td>
      <td>BREDA</td>
      <td>5206</td>
      <td>2215947.11</td>
      <td>381799.92</td>
      <td>920439.00</td>
      <td>301494.04</td>
      <td>88705.2</td>
      <td>142402.72</td>
      <td>677836.15</td>
      <td>187429.87</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>3756487.05</td>
    </tr>
    <tr>
      <th>8234</th>
      <td>V</td>
      <td>10 t/m 14 jaar</td>
      <td>BREDA</td>
      <td>4915</td>
      <td>1425550.97</td>
      <td>255232.99</td>
      <td>564944.21</td>
      <td>284269.76</td>
      <td>91482.6</td>
      <td>134486.26</td>
      <td>620303.59</td>
      <td>202916.68</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>2795294.25</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:

Let us consider the relation between health care expenditure and the size of a municipality.

We define ~expenditure_per_head~ as follows:

#+BEGIN_SRC ipython
df_gemeente['expenditure_per_head'] = df_gemeente['health_expenditure_under_deductible']/df_gemeente['number_citizens']
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

#+BEGIN_SRC ipython
sf = df_gemeente.groupby(['age','sex']).mean().unstack('sex')
sf.columns = ['_'.join(col).strip() for col in sf.columns.values]
sf[['number_citizens_M','number_citizens_V']]
#+END_SRC

#+RESULTS:
:RESULTS:

                number_citizens_M  number_citizens_V
age                                                 
 0 t/m  4 jaar        1158.689744        1103.956410
 5 t/m  9 jaar        1217.212821        1159.769231
10 t/m 14 jaar        1318.543590        1261.476923
15 t/m 19 jaar        1301.446154        1240.948718
20 t/m 24 jaar        1339.043590        1301.069231
25 t/m 29 jaar        1313.989744        1313.552699
30 t/m 34 jaar        1279.610256        1281.982051
35 t/m 39 jaar        1266.212821        1279.656410
40 t/m 44 jaar        1489.674359        1506.571795
45 t/m 49 jaar        1646.541026        1633.228205
50 t/m 54 jaar        1621.823077        1618.964103
55 t/m 59 jaar        1473.520513        1477.592308
60 t/m 64 jaar        1346.738462        1346.020513
65 t/m 69 jaar        1305.512821        1321.041026
70 t/m 74 jaar         905.982051         959.366667
75 t/m 79 jaar         657.420513         774.469231
80 t/m 84 jaar         436.694872         621.133333
85 t/m 89 jaar         227.731959         419.928205
90+                     97.492188         276.679587
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>number_citizens_M</th>
      <th>number_citizens_V</th>
    </tr>
    <tr>
      <th>age</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0 t/m  4 jaar</th>
      <td>1158.689744</td>
      <td>1103.956410</td>
    </tr>
    <tr>
      <th>5 t/m  9 jaar</th>
      <td>1217.212821</td>
      <td>1159.769231</td>
    </tr>
    <tr>
      <th>10 t/m 14 jaar</th>
      <td>1318.543590</td>
      <td>1261.476923</td>
    </tr>
    <tr>
      <th>15 t/m 19 jaar</th>
      <td>1301.446154</td>
      <td>1240.948718</td>
    </tr>
    <tr>
      <th>20 t/m 24 jaar</th>
      <td>1339.043590</td>
      <td>1301.069231</td>
    </tr>
    <tr>
      <th>25 t/m 29 jaar</th>
      <td>1313.989744</td>
      <td>1313.552699</td>
    </tr>
    <tr>
      <th>30 t/m 34 jaar</th>
      <td>1279.610256</td>
      <td>1281.982051</td>
    </tr>
    <tr>
      <th>35 t/m 39 jaar</th>
      <td>1266.212821</td>
      <td>1279.656410</td>
    </tr>
    <tr>
      <th>40 t/m 44 jaar</th>
      <td>1489.674359</td>
      <td>1506.571795</td>
    </tr>
    <tr>
      <th>45 t/m 49 jaar</th>
      <td>1646.541026</td>
      <td>1633.228205</td>
    </tr>
    <tr>
      <th>50 t/m 54 jaar</th>
      <td>1621.823077</td>
      <td>1618.964103</td>
    </tr>
    <tr>
      <th>55 t/m 59 jaar</th>
      <td>1473.520513</td>
      <td>1477.592308</td>
    </tr>
    <tr>
      <th>60 t/m 64 jaar</th>
      <td>1346.738462</td>
      <td>1346.020513</td>
    </tr>
    <tr>
      <th>65 t/m 69 jaar</th>
      <td>1305.512821</td>
      <td>1321.041026</td>
    </tr>
    <tr>
      <th>70 t/m 74 jaar</th>
      <td>905.982051</td>
      <td>959.366667</td>
    </tr>
    <tr>
      <th>75 t/m 79 jaar</th>
      <td>657.420513</td>
      <td>774.469231</td>
    </tr>
    <tr>
      <th>80 t/m 84 jaar</th>
      <td>436.694872</td>
      <td>621.133333</td>
    </tr>
    <tr>
      <th>85 t/m 89 jaar</th>
      <td>227.731959</td>
      <td>419.928205</td>
    </tr>
    <tr>
      <th>90+</th>
      <td>97.492188</td>
      <td>276.679587</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:


#+BEGIN_SRC ipython
df = df_gemeente.loc[df_gemeente.groupby(['age','sex'])['expenditure_per_head'].idxmin()][['sex','age','number_citizens']].set_index(['age','sex']).unstack('sex')
df.columns = ['_'.join(col).strip() for col in df.columns.values]
df
#+END_SRC

#+RESULTS:
:RESULTS:

                number_citizens_M  number_citizens_V
age                                                 
 0 t/m  4 jaar                 19                283
 5 t/m  9 jaar                282                116
10 t/m 14 jaar                 28                 37
15 t/m 19 jaar                 85                 21
20 t/m 24 jaar                 19                450
25 t/m 29 jaar                 23                168
30 t/m 34 jaar                146                617
35 t/m 39 jaar                 22                 42
40 t/m 44 jaar                 40                 48
45 t/m 49 jaar                 38                335
50 t/m 54 jaar                182                 28
55 t/m 59 jaar                351                 58
60 t/m 64 jaar                 29                 47
65 t/m 69 jaar                 40                 66
70 t/m 74 jaar                227                248
75 t/m 79 jaar                 19                 64
80 t/m 84 jaar                 11                 13
85 t/m 89 jaar                 55                 10
90+                            18                 12
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>number_citizens_M</th>
      <th>number_citizens_V</th>
    </tr>
    <tr>
      <th>age</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0 t/m  4 jaar</th>
      <td>19</td>
      <td>283</td>
    </tr>
    <tr>
      <th>5 t/m  9 jaar</th>
      <td>282</td>
      <td>116</td>
    </tr>
    <tr>
      <th>10 t/m 14 jaar</th>
      <td>28</td>
      <td>37</td>
    </tr>
    <tr>
      <th>15 t/m 19 jaar</th>
      <td>85</td>
      <td>21</td>
    </tr>
    <tr>
      <th>20 t/m 24 jaar</th>
      <td>19</td>
      <td>450</td>
    </tr>
    <tr>
      <th>25 t/m 29 jaar</th>
      <td>23</td>
      <td>168</td>
    </tr>
    <tr>
      <th>30 t/m 34 jaar</th>
      <td>146</td>
      <td>617</td>
    </tr>
    <tr>
      <th>35 t/m 39 jaar</th>
      <td>22</td>
      <td>42</td>
    </tr>
    <tr>
      <th>40 t/m 44 jaar</th>
      <td>40</td>
      <td>48</td>
    </tr>
    <tr>
      <th>45 t/m 49 jaar</th>
      <td>38</td>
      <td>335</td>
    </tr>
    <tr>
      <th>50 t/m 54 jaar</th>
      <td>182</td>
      <td>28</td>
    </tr>
    <tr>
      <th>55 t/m 59 jaar</th>
      <td>351</td>
      <td>58</td>
    </tr>
    <tr>
      <th>60 t/m 64 jaar</th>
      <td>29</td>
      <td>47</td>
    </tr>
    <tr>
      <th>65 t/m 69 jaar</th>
      <td>40</td>
      <td>66</td>
    </tr>
    <tr>
      <th>70 t/m 74 jaar</th>
      <td>227</td>
      <td>248</td>
    </tr>
    <tr>
      <th>75 t/m 79 jaar</th>
      <td>19</td>
      <td>64</td>
    </tr>
    <tr>
      <th>80 t/m 84 jaar</th>
      <td>11</td>
      <td>13</td>
    </tr>
    <tr>
      <th>85 t/m 89 jaar</th>
      <td>55</td>
      <td>10</td>
    </tr>
    <tr>
      <th>90+</th>
      <td>18</td>
      <td>12</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:

#+BEGIN_SRC ipython
df.join(sf[['number_citizens_M','number_citizens_V']],how='outer',lsuffix='_min').plot(title="comparison average number of citizens with number of citizens in municipalities with lowest expenditure",rot = 45)
#+END_SRC

#+RESULTS:
:RESULTS:

<matplotlib.axes._subplots.AxesSubplot at 0x10ebec400>
<matplotlib.figure.Figure at 0x1144a26d8>
[[file:ipython-inline-images/ob-ipython-a68d562a623c82e3328a12ee121eb66c.png]]
:END:


Or is something else going on?


#+BEGIN_SRC ipython
age = '75 t/m 79 jaar'

plt.scatter(df_gemeente.loc[(df_gemeente.age == age)].number_citizens,df_gemeente.loc[(df_gemeente.age == age)].expenditure_per_head)

#+END_SRC

#+RESULTS:
:RESULTS:

<matplotlib.collections.PathCollection at 0x114935748>
<matplotlib.figure.Figure at 0x113f1c898>
[[file:ipython-inline-images/ob-ipython-c6fe26270822d5ab3631903d1ce5b018.png]]
:END:


* Health care expenditure and age

The municipality data set above does not give the health care expenditure per age; only per age group (like 0-4 year olds). So we load another data set that does feature health care expenditure per age.

** read in the data

Again, we use data from [[http://www.vektis.nl/index.php/vektis-open-data][Vektis]]. We import the data, which is a 'csv' file with ";" as separator between columns. We also import some libraries.

Then we look at the columns (variables) in the data.

#+BEGIN_SRC ipython
import numpy as np
df_postal_code = pd.read_csv('Vektis_Open_Databestand_Zorgverzekeringswet_2014_-_postcode3.csv', sep = ';')
df_postal_code.dtypes
#+END_SRC

#+RESULTS:
:RESULTS:

GESLACHT                                   object
LEEFTIJDSKLASSE                            object
POSTCODE_3                                float64
AANTAL_BSN                                  int64
AANTAL_VERZEKERDEJAREN                    float64
KOSTEN_MEDISCH_SPECIALISTISCHE_ZORG       float64
KOSTEN_FARMACIE                           float64
KOSTEN_TWEEDELIJNS_GGZ                    float64
KOSTEN_HUISARTS_INSCHRIJFTARIEF           float64
KOSTEN_HUISARTS_CONSULT                   float64
KOSTEN_HUISARTS_OVERIG                    float64
KOSTEN_HULPMIDDELEN                       float64
KOSTEN_MONDZORG                           float64
KOSTEN_PARAMEDISCHE_ZORG_FYSIOTHERAPIE    float64
KOSTEN_PARAMEDISCHE_ZORG_OVERIG           float64
KOSTEN_ZIEKENVERVOER_ZITTEND              float64
KOSTEN_ZIEKENVERVOER_LIGGEND              float64
KOSTEN_KRAAMZORG                          float64
KOSTEN_VERLOSKUNDIGE_ZORG                 float64
KOSTEN_GENERALISTISCHE_BASIS_GGZ          float64
KOSTEN_GRENSOVERSCHRIJDENDE_ZORG          float64
KOSTEN_EERSTELIJNS_ONDERSTEUNING          float64
KOSTEN_GERIATRISCHE_REVALIDATIEZORG       float64
KOSTEN_OVERIG                             float64
dtype: object
:END:

This looks very much like the data set above, so we want to do the same steps to get the data into the shape we want. In fact, if you go to the website [[http://www.vektis.nl/index.php/vektis-open-data][Vektis]] there are similar data sets for other years. Copy and paste the steps above and then apply these steps to the new data sets is asking for trouble:

+ you are likely to make mistakes with copy/paste
+ if you figure out that you want to change one of your commands, you have to change all the pasted versions as well

One solution in python is to define a function that does all these steps for you and apply this function to all the data sets that you want to work with.

#+BEGIN_SRC ipython
df_postal_code = get_data_into_shape(df_postal_code)
#+END_SRC

#+RESULTS:
:RESULTS:

:END:



#+BEGIN_SRC ipython
df_postal_code = df_postal_code[(df_postal_code['age'] != '90+')]
df_postal_code['age'] = df_postal_code['age'].astype(int)
#+END_SRC

#+RESULTS:
:RESULTS:

:END:


We define health care costs per head:

#+BEGIN_SRC ipython
df_postal_code['health_costs_per_head'] = df_postal_code['health_expenditure_under_deductible']/df_postal_code['number_citizens']
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

So for, say, 18 year old males, we have a distribution of costs per head over the different ~postal codes~. For each combination of age and sex, we can look at the average expenditure. With ~pandas~ this is easy to do. We use ~groupby~, specify the dimensions over which we want to group, the variable we are interested in and give the function to aggregate (mean, in this case).

#+BEGIN_SRC ipython
costs_per_sex_age = df_postal_code.groupby(['sex','age'])['health_costs_per_head'].mean()
#+END_SRC

#+RESULTS:
:RESULTS:

:END:


** matplotlib

Then we can plot this distribution of health care expenditure per head with age for males and females.

#+BEGIN_SRC ipython
import matplotlib.pyplot as plt
plt.style.use('seaborn')
fig = plt.figure()
ax = costs_per_sex_age['M'].plot()
ax = costs_per_sex_age['V'].plot()
ax.set_xlabel('age')
ax.set_ylabel('costs per head')
ax.set_title('average costs per age and sex')
ax.legend(['male','female'])
fig.savefig("males.png")
#+END_SRC

#+RESULTS:
:RESULTS:

<matplotlib.figure.Figure at 0x11779cdd8>
[[file:ipython-inline-images/ob-ipython-ed4630fbf88b4d768e6c088e1a164c48.png]]
:END:

-----------------

*Exercise*

Finish the following code block to show how total obstetrics vary with 'age' and 'sex' (what would you guess...). 

#+NAME: winter-papa-single-delaware
#+BEGIN_SRC ipython
obstetrics_per_sex_age = df_postal_code.groupby(['sex','age'])['obstetrics'].sum()

....

fig.savefig("obstetrics.png")
#+END_SRC


---------------

We can plot a histogram of the distribution of hospital care expenditure across postal code areas.

#+BEGIN_SRC ipython
hospital_care_expenditure = df_postal_code.groupby(['age','POSTCODE_3'])['hospital_care'].sum()

plt.clf()
plt.hist(hospital_care_expenditure[7],normed = True, bins = 100)
plt.show()
#+END_SRC

#+RESULTS:
:RESULTS:

<matplotlib.figure.Figure at 0x1177abc88>
[[file:ipython-inline-images/ob-ipython-64e58813edd375ce91c46e28b1678528.png]]
:END:


------------

*Exercise*

In which fraction of postal code areas does hospital expenditures on 50 year olds exceed 50000 euro? Finish the following code block to find out.

#+BEGIN_SRC ipython
sum()/len()
#+END_SRC

------------------


Suppose you are interested in the effect of the deductible on health care expenditure. Why would the following graph help for this?

#+BEGIN_SRC ipython
plt.style.use('seaborn')
plt.clf()
age_range = [14,15,16,17,19,20,21,22]

plt.plot(age_range,costs_per_sex_age['M'][age_range], marker='.', label = 'male')
plt.plot(age_range,costs_per_sex_age['V'][age_range], marker='.', label = 'female')
plt.xlabel('age')
plt.ylabel('health care costs')
plt.legend()
fig.savefig('fig14to22.png')

#+END_SRC

#+RESULTS:
:RESULTS:

<matplotlib.figure.Figure at 0x1142f2710>
[[file:ipython-inline-images/ob-ipython-3f8b13293b77ed38b1a42591450b752d.png]]
:END:


** plotly

Instead of ~matplotlib~ to plot, we can also use ~plotly~. With ~plotly~ you can make interactive graphs. The graph runs on plotly's servers and can for instance be included in presentations.

We are going to plot the cumulative distribution functions of health care expenditure for different age groups. We first define the cumulative distribution function ~ecdf~.

#+BEGIN_SRC ipython
def ecdf(data):
    x = np.sort(data)
    y = np.arange(1.0, len(x)+1.0) / len(x)
    return x, y
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

Then we define the $x$ and $y$ coordinates of the functions we want to plot: the ~ecdf~ of health care expenditures for ages 16, 17, 19 and 20.

#+BEGIN_SRC ipython
x_16, y_16 = ecdf(df_postal_code.health_costs_per_head[(df_postal_code['age'] == 16)])
x_17, y_17 = ecdf(df_postal_code.health_costs_per_head[(df_postal_code['age'] == 17)])
x_19, y_19 = ecdf(df_postal_code.health_costs_per_head[(df_postal_code['age'] == 19)])
x_20, y_20 = ecdf(df_postal_code.health_costs_per_head[(df_postal_code['age'] == 20)])


#+END_SRC

#+RESULTS:
:RESULTS:

:END:

We import plotly.

#+BEGIN_SRC ipython
import plotly.plotly as py
from plotly.graph_objs import *
import plotly.tools as tls
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

Finally, we define the graph itself. We specify the "Scatter's" and the layout. The web address can be used if you want to include this graph in a presentation.

#+BEGIN_SRC ipython
age16 = Scatter(
    x=x_16,
    y=y_16,
    mode='markers+lines',
    name = 'age 16'
)
age17 = Scatter(
    x=x_17,
    y=y_17,
    mode='markers+lines',
    name = 'age 17'
)
age19 = Scatter(
    x=x_19,
    y=y_19,
    mode='markers+lines',
    name = 'age 19'
)
age20 = Scatter(
    x=x_20,
    y=y_20,
    mode='markers+lines',
    name = 'age 20'
)

layout = Layout(
    title='Health care expend. distribution functions',
    xaxis=XAxis(
        range=[0,3000],
        title='expenditure per head',
        titlefont=Font(
            family='Courier New, monospace',
            size=18,
            color='#7f7f7f'
        )
    ),
    yaxis=YAxis(
        title='cum. distribution function',
        titlefont=Font(
            family='Courier New, monospace',
            size=18,
            color='#7f7f7f'
        )
    )
)

data = Data([age16,age17,age19,age20])
fig = Figure(data=data, layout=layout)
py.plot(fig, filename='Distribution functions of health care expenditure per head')
tls.embed("https://plot.ly/~janboone/301")
#+END_SRC

#+RESULTS:
:RESULTS:

<plotly.tools.PlotlyDisplay object>
#+BEGIN_EXPORT HTML
<iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plot.ly/~janboone/301.embed" height="525" width="100%"></iframe>
#+END_EXPORT
:END:





* Data on health care cost distributions




#+BEGIN_SRC ipython
import pandas as pd
import numpy as np
from scipy import stats
#from sklearn.model_selection import train_test_split
#from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import bisect
plt.style.use('seaborn')
%matplotlib inline
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

The following data set is based on individual level data. We read in a summary data set which is:

+ based on half the Dutch population in 2009
+ and leaves out people with:

  + a voluntary deductible
  + fkg, dkg = 1

It distinguishes sub-groups based on age, gender and the average income level of the postal code area where a person lives: ~cat_std_hhinc~ =1 refers to a postal code in the lowest quintile in the income distribution, ~cat_std_hhinc~ = 5 the highest income quintile.

~mean_expenditure~ refers to the average health care expenditure (under the deductible) for people in this group. ~number~ refers to the number of people in this group. The variables starting with ~fraction~ refer to the fraction of people with a certain health care expenditure. To illustrate, ~fraction_0.0~ refers to the fraction of people in the group with no (zero) health care expenditures. ~fraction_$x$~ refers to the fraction of people with health care expenditure below $x$; where $x$ runs up to 3000. Finally, ~fraction_above_high = 1-fraction_3000.0~.

#+BEGIN_SRC ipython
fkg = 0
dkg = 0
df_health = pd.read_csv('data_info.csv')
df_health.head()
#+END_SRC

#+RESULTS:
:RESULTS:

   Unnamed: 0  age  fkg  dkg  sex  cat_std_hhinc  mean_expenditure  number  \
0           0    0    0    0    0              1       2886.415905    8496   
1           1    0    0    0    0              2       2568.640214    8170   
2           2    0    0    0    0              3       2508.909124    8735   
3           3    0    0    0    0              4       2333.021741    8840   
4           4    0    0    0    0              5       2385.869925    9177   

   fraction_above_high  fraction_0.0       ...         fraction_2100.0  \
0             0.225636      0.135593       ...                0.643008   
1             0.207344      0.149204       ...                0.649327   
2             0.192330      0.152604       ...                0.669376   
3             0.194231      0.158937       ...                0.676584   
4             0.192329      0.155388       ...                0.685518   

   fraction_2200.0  fraction_2300.0  fraction_2400.0  fraction_2500.0  \
0         0.649835         0.658545         0.673493         0.681968   
1         0.655202         0.663403         0.681395         0.689963   
2         0.675787         0.685747         0.703606         0.712536   
3         0.682466         0.691742         0.706448         0.715724   
4         0.692274         0.701645         0.717337         0.726272   

   fraction_2600.0  fraction_2700.0  fraction_2800.0  fraction_2900.0  \
0         0.716455         0.727048         0.739760         0.757298   
1         0.731824         0.743696         0.755447         0.774908   
2         0.749857         0.760275         0.775157         0.794734   
3         0.752489         0.762557         0.774774         0.790837   
4         0.760597         0.769424         0.780647         0.795358   

   fraction_3000.0  
0         0.774364  
1         0.792656  
2         0.807670  
3         0.805769  
4         0.807671  

[5 rows x 70 columns]
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Unnamed: 0</th>
      <th>age</th>
      <th>fkg</th>
      <th>dkg</th>
      <th>sex</th>
      <th>cat_std_hhinc</th>
      <th>mean_expenditure</th>
      <th>number</th>
      <th>fraction_above_high</th>
      <th>fraction_0.0</th>
      <th>...</th>
      <th>fraction_2100.0</th>
      <th>fraction_2200.0</th>
      <th>fraction_2300.0</th>
      <th>fraction_2400.0</th>
      <th>fraction_2500.0</th>
      <th>fraction_2600.0</th>
      <th>fraction_2700.0</th>
      <th>fraction_2800.0</th>
      <th>fraction_2900.0</th>
      <th>fraction_3000.0</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>2886.415905</td>
      <td>8496</td>
      <td>0.225636</td>
      <td>0.135593</td>
      <td>...</td>
      <td>0.643008</td>
      <td>0.649835</td>
      <td>0.658545</td>
      <td>0.673493</td>
      <td>0.681968</td>
      <td>0.716455</td>
      <td>0.727048</td>
      <td>0.739760</td>
      <td>0.757298</td>
      <td>0.774364</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>2</td>
      <td>2568.640214</td>
      <td>8170</td>
      <td>0.207344</td>
      <td>0.149204</td>
      <td>...</td>
      <td>0.649327</td>
      <td>0.655202</td>
      <td>0.663403</td>
      <td>0.681395</td>
      <td>0.689963</td>
      <td>0.731824</td>
      <td>0.743696</td>
      <td>0.755447</td>
      <td>0.774908</td>
      <td>0.792656</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>3</td>
      <td>2508.909124</td>
      <td>8735</td>
      <td>0.192330</td>
      <td>0.152604</td>
      <td>...</td>
      <td>0.669376</td>
      <td>0.675787</td>
      <td>0.685747</td>
      <td>0.703606</td>
      <td>0.712536</td>
      <td>0.749857</td>
      <td>0.760275</td>
      <td>0.775157</td>
      <td>0.794734</td>
      <td>0.807670</td>
    </tr>
    <tr>
      <th>3</th>
      <td>3</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>4</td>
      <td>2333.021741</td>
      <td>8840</td>
      <td>0.194231</td>
      <td>0.158937</td>
      <td>...</td>
      <td>0.676584</td>
      <td>0.682466</td>
      <td>0.691742</td>
      <td>0.706448</td>
      <td>0.715724</td>
      <td>0.752489</td>
      <td>0.762557</td>
      <td>0.774774</td>
      <td>0.790837</td>
      <td>0.805769</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>5</td>
      <td>2385.869925</td>
      <td>9177</td>
      <td>0.192329</td>
      <td>0.155388</td>
      <td>...</td>
      <td>0.685518</td>
      <td>0.692274</td>
      <td>0.701645</td>
      <td>0.717337</td>
      <td>0.726272</td>
      <td>0.760597</td>
      <td>0.769424</td>
      <td>0.780647</td>
      <td>0.795358</td>
      <td>0.807671</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 70 columns</p>
</div>
#+END_EXPORT
:END:


The following definitions allow us to easily plot the distribution of health care expenditure for sub-groups.

#+BEGIN_SRC ipython
bins = list(np.linspace(0,1000,41))+ list(np.linspace(1100,3000,20)) # generates a range of costs
fractions = ["fraction_"+str(i) for i in bins]
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

First, consider the average expenditure per age group. This is similar to the graphs we made above. Here we can also differentiate per income quintile.


#+BEGIN_SRC ipython
sex=0
income=1

plt.plot(df_health.loc[(df_health.sex==sex)&(df_health.dkg==dkg)&(df_health.fkg==fkg)&(df_health.cat_std_hhinc == income)].age,df_health.loc[(df_health.sex==sex)&(df_health.dkg==dkg)&(df_health.fkg==fkg)&(df_health.cat_std_hhinc == income)].mean_expenditure, label = "female, income categ. 1")

income = 5
plt.plot(df_health.loc[(df_health.sex==sex)&(df_health.dkg==dkg)&(df_health.fkg==fkg)&(df_health.cat_std_hhinc == income)].age,df_health.loc[(df_health.sex==sex)&(df_health.dkg==dkg)&(df_health.fkg==fkg)&(df_health.cat_std_hhinc == income)].mean_expenditure, label = "female, income categ. 5")
plt.legend()
plt.xlabel('age')
plt.ylabel('average expenditure')

plt.show()


#+END_SRC

#+RESULTS:
:RESULTS:

<matplotlib.figure.Figure at 0x117114630>
[[file:ipython-inline-images/ob-ipython-d713d7abccf6a02b17e50db74bce4efe.png]]
:END:


#+BEGIN_SRC ipython
sex=1
income=1

plt.plot(df_health.loc[(df_health.sex==sex)&(df_health.dkg==dkg)&(df_health.fkg==fkg)&(df_health.cat_std_hhinc == income)].age,df_health.loc[(df_health.sex==sex)&(df_health.dkg==dkg)&(df_health.fkg==fkg)&(df_health.cat_std_hhinc == income)].mean_expenditure, label = "male, income categ. 1")

income = 5
plt.plot(df_health.loc[(df_health.sex==sex)&(df_health.dkg==dkg)&(df_health.fkg==fkg)&(df_health.cat_std_hhinc == income)].age,df_health.loc[(df_health.sex==sex)&(df_health.dkg==dkg)&(df_health.fkg==fkg)&(df_health.cat_std_hhinc == income)].mean_expenditure, label = "male, income categ. 5")
plt.legend()
plt.xlabel('age')
plt.ylabel('average expenditure')
#plt.xlim(10,29)
#plt.ylim(0,500)
plt.show()


#+END_SRC

#+RESULTS:
:RESULTS:

<matplotlib.figure.Figure at 0x117b3fc50>
[[file:ipython-inline-images/ob-ipython-57f522601aa39e5754770913eb3032bd.png]]
:END:


#+BEGIN_SRC ipython
age = 20
age2 = 70
sex = 0
cat_std_hhinc = 1
range_costs = bins
range_freq = [df_health.loc[(df_health.sex==sex)&(df_health.cat_std_hhinc==cat_std_hhinc)&(df_health.age==age)][fraction].values[0] for fraction in fractions]
range_freq2 = [df_health.loc[(df_health.sex==sex)&(df_health.cat_std_hhinc==cat_std_hhinc)&(df_health.age==age2)][fraction].values[0] for fraction in fractions]

plt.plot(range_costs,range_freq,label='age='+str(age))
plt.plot(range_costs,range_freq2,label='age='+str(age2))
plt.legend()
plt.xlabel('$x$')
plt.ylim(0,1)
plt.show()
#+END_SRC

#+RESULTS:
:RESULTS:

<matplotlib.figure.Figure at 0x117b2e470>
[[file:ipython-inline-images/ob-ipython-106a5a8d36e23fd8aa0e252068b74435.png]]
:END:


Government is worried about the impact that a deductible has on people with low income. Suppose the government would impose a deductible equal to 500 euro (and health care expenditure would not change). Plot per age category the fraction of people that would have to pay 500 euro on health care costs. How does this vary with income?




It is also possible to make animations

#+BEGIN_SRC ipython
import io
from matplotlib import animation
import base64
from IPython.display import HTML
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

#+BEGIN_SRC ipython
fig = plt.figure()
ax = plt.axes(xlim=(0, 3000), ylim=(0, 1))
line, = ax.plot([], [], lw=2)
text = ax.text(0.02, 0.95, '', transform=ax.transAxes)

# initialization function: plot the background of each frame
def init():
    line.set_data([], [])
    text.set_text('')
    return line, text

# animation function.  This is called sequentially
def animate(i):
    x = range_costs
    age = 19+i
    y = [df_health.loc[(df_health.sex==sex)&(df_health.cat_std_hhinc==cat_std_hhinc)&(df_health.age==age)][fraction].values[0] for fraction in fractions]
    line.set_data(x, y)
    text.set_text('age = %.0f' % age)
    return line, text

# call the animator.  blit=True means only re-draw the parts that have changed.
anim = animation.FuncAnimation(fig, animate, init_func=init,
                               frames=72, interval=200, blit=True)

# save the animation as an mp4.  This requires ffmpeg or mencoder to be
# installed.  The extra_args ensure that the x264 codec is used, so that
# the video can be embedded in html5.  You may need to adjust this for
# your system: for more information, see
# http://matplotlib.sourceforge.net/api/animation_api.html
anim.save('distr_animation_age.mp4', fps=3, extra_args=['-vcodec', 'libx264'])

video = io.open('distr_animation_age.mp4', 'r+b').read()
encoded = base64.b64encode(video)
HTML(data='''<video alt="test" controls>
                <source src="data:video/mp4;base64,{0}" type="video/mp4" />
             </video>'''.format(encoded.decode('ascii')))
#+END_SRC

#+RESULTS:
:RESULTS:

<IPython.core.display.HTML object>
#+BEGIN_EXPORT HTML
<video alt="test" controls>
                <source src="data:video/mp4;base64," type="video/mp4" />
             </video>
#+END_EXPORT
<matplotlib.figure.Figure at 0x11790eac8>
[[file:ipython-inline-images/ob-ipython-1fb2dab9d17aa03d7446410d719e8be8.png]]
:END:



Make an animation to show how health care expenditure per age group varies with income.




* A first look at machine learning

Python is used a lot in data science. If you are interested you can check out libraries like [[https://www.tensorflow.org/][TensorFlow]] and [[https://keras.io/][keras]]. We will have a (brief) look at [[http://scikit-learn.org/stable/index.html][scikit-learn]]. If you want to know more, go to [[https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/classification?ex=1][Datacamp]] and follow the course before your subscription runs out...

We will use the data set above and see whether we can distinguish different age-categories based on their health care expenditure. From the dataframe we select the age categories 25 and 70. Then we use the expenditure per head in each category to predict the age-sex category of this postal code area.

As above we import the relevant libraries and data.

#+BEGIN_SRC ipython
import numpy as np
import pandas as pd
import matplotlib as plt
df_postal_code = pd.read_csv('Vektis_Open_Databestand_Zorgverzekeringswet_2014_-_postcode3.csv', sep = ';')
#+END_SRC

#+RESULTS:
:RESULTS:

:END:


We now use a slightly different way to get the data into shape and hence we rename the function.

#+BEGIN_SRC ipython
def get_data_into_shape_2(df):
    df = df.rename_axis({
        'GESLACHT':'sex',
        'LEEFTIJDSKLASSE':'age',
        'GEMEENTENAAM':'MUNICIPALITY',
        'AANTAL_BSN':'number_citizens',
        'KOSTEN_MEDISCH_SPECIALISTISCHE_ZORG':'hospital_care',
        'KOSTEN_FARMACIE':'pharmaceuticals',
        'KOSTEN_TWEEDELIJNS_GGZ':'mental_care',
        'KOSTEN_HUISARTS_INSCHRIJFTARIEF':'GP_capitation',
        'KOSTEN_HUISARTS_CONSULT':'GP_fee_for_service',
        'KOSTEN_HUISARTS_OVERIG':'GP_other',
        'KOSTEN_MONDZORG':'dental_care',
        'KOSTEN_PARAMEDISCHE_ZORG_FYSIOTHERAPIE':'physiotherapy',
        'KOSTEN_KRAAMZORG':'maternity_care',
        'KOSTEN_VERLOSKUNDIGE_ZORG':'obstetrics',
        'KOSTEN_GERIATRISCHE_REVALIDATIEZORG':'geriatrics'
                        }, axis='columns')
    df.drop(['AANTAL_VERZEKERDEJAREN',
             'KOSTEN_HULPMIDDELEN',
             'KOSTEN_PARAMEDISCHE_ZORG_OVERIG',
             'KOSTEN_ZIEKENVERVOER_ZITTEND',
             'KOSTEN_ZIEKENVERVOER_LIGGEND',
             'KOSTEN_GRENSOVERSCHRIJDENDE_ZORG',
             'KOSTEN_OVERIG',
             'KOSTEN_GENERALISTISCHE_BASIS_GGZ',
             'KOSTEN_EERSTELIJNS_ONDERSTEUNING'],inplace=True,axis=1)
    df.drop(df.index[[0]], inplace=True)
    return df

#+END_SRC

#+RESULTS:
:RESULTS:

:END:
With the function above, we first get the data into the shape that we want.

#+BEGIN_SRC ipython
df_postal_code = get_data_into_shape_2(df_postal_code)
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

We are going to consider the ages 25 and 70. As age can be integer or string, we include both in the list of age-values that we wish to select.

#+BEGIN_SRC ipython
df_25_70 = df_postal_code[df_postal_code['age'].isin(['25','70', 25, 70])]
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

We define the groups as "25M" for 25 year old males. In order to add the columns "sex" and "age", they need to be strings as in python adding the strings `"abc"+"def"` yields `"abcdef"`; which is exactly what we want.

#+BEGIN_SRC ipython
df_25_70.age = df_25_70.age.astype('str')
df_25_70.sex = df_25_70.sex.astype('str')
df_25_70['target'] = df_25_70.age+df_25_70.sex

#+END_SRC

#+RESULTS:
:RESULTS:

:END:

This combination of age and sex (4 categories) is the variable that we want to predict. Hence, we call the variable `target`. We turn `target` into a category and find that there are indeed 4 of these categories.

#+BEGIN_SRC ipython
df_25_70['target'] = df_25_70['target'].astype('category')
df_25_70['target'].cat.categories
#+END_SRC

#+RESULTS:
:RESULTS:

Index(['25.0M', '25V', '70M', '70V'], dtype='object')
:END:

With `.cat.codes` we turn our categories into integers 0, 1, 2, 3. 

#+BEGIN_SRC ipython
df_25_70['target'].cat.codes.describe()
#+END_SRC

#+RESULTS:
:RESULTS:

count    3031.000000
mean        1.501815
std         1.119250
min         0.000000
25%         0.000000
50%         2.000000
75%         3.000000
max         3.000000
dtype: float64
:END:

We redefine expenditures in each care category as per head expenditure in the 3 digit postal code area. We then think of each area as being an "individual". Based on the individuals expenditure per care category, we predict age and sex. The following code redefines for each care category the total expenditure into an expenditure per head.

#+BEGIN_SRC ipython
care_categories = ['hospital_care', 'pharmaceuticals', 'mental_care', 'GP_capitation', 'GP_fee_for_service', 'GP_other', 'dental_care', 'physiotherapy', 'maternity_care', 'obstetrics', 'geriatrics']

for variable in care_categories:
    df_25_70[variable] = df_25_70[variable]/df_25_70['number_citizens']

#+END_SRC

#+RESULTS:
:RESULTS:

:END:

------------

*Exercise*

Get a sense of what the dataframe ~df_25_70~ looks like.

#+BEGIN_SRC ipython

#+END_SRC

------------

The variable `target` is the variable we would like to predict. Hence, we call it $y$. We choose a subset of health care expenditure categories (you can experiment with this yourself) as predictors (independent variables) and denote the variables in this subset by $X$.

#+BEGIN_SRC ipython
y = df_25_70.target

subset_care_categories = ['physiotherapy', 'obstetrics', 'geriatrics', 'pharmaceuticals']
X = df_25_70[subset_care_categories]


#+END_SRC

#+RESULTS:
:RESULTS:

:END:

In this version of the notebook we use four cost categories to separate the different age-sex types. The algorithm below makes this separation in four dimensional space. To get a first intuition, we can consider the data points in two dimensional space, using pairwise combinations of the cost categories. The function `scatter_matrix` does this for each pairwise combination of the cost categories. By turning the variable `target` into integers 0,1,2,3 we can use this variable to color the points. Each category has its own color. For this translation to integers, we use the `.cat.codes` attribute that we saw above.


#+BEGIN_SRC ipython
from pandas.tools.plotting import scatter_matrix # Import the function to plot a scatterplot
    
%matplotlib inline

scatter_matrix(
    X,  # drop the none feature columns
    figsize=(12, 12),                                             # square figuresize for the matrix
    alpha=0.5,                                                    # alpha of 0.5 to see overlapping dots
    s=50,                                                         # fixed size of 50
    c=[plt.cm.get_cmap('rainbow', 4)(idx) for idx in df_25_70['target'].cat.codes],
    diagonal='kde');                                              # diagonal line are feature distributions

#+END_SRC

#+RESULTS:
:RESULTS:

<matplotlib.figure.Figure at 0x1172dc3c8>
[[file:ipython-inline-images/ob-ipython-3bce58cd32144f7bc30e57554c04737c.png]]
:END:

In order to classify points, we use the k-neighbours method. The idea is as follows. To classify a point, we consider its $k$ closest neighbours. If the majority of these neighbours have label, say '70M', then we classify this point also as '70M'.

As the goal here is to predict, we do not worry about concepts like normal distribution, p-values, co-linearity. We simply split the data set into two subsets. We estimate (train) the model on the first data set. Then we apply the estimated model on the other (test) data. For the test data we calculate how often we get it right.

From scikit-learn we import the function `train_test_split`. This function splits our data $X,y$ into a training and a testing data set. The size of the test data set is set at 30% here. We can set the seed (21) for the random number generator --don't worry if this does not mean anything to you. Finally, we stratify the data such that the distribution of labels is the same in the training and testing data.

Here we set the number of neighbours equal to $k=8$. Higher values of $k$ give smoother results and lead to a "simpler" model but misses local subtleties. The extreme is where $k=n$ (the number of observations). Then all observations get the same label (the mode of the distribution). 

Then we fit this model `knn` to our training data. After we fitted the model, we can predict labels in the test data set. The score indicates the percentage of labels we got right in the test data.

#+BEGIN_SRC ipython
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=21, stratify=y)
knn = KNeighborsClassifier(n_neighbors=8)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print(knn.score(X_test, y_test))
#+END_SRC

#+RESULTS:
:RESULTS:
0.77032967033

:END:

Now let us focus on women with age 25 and 70. Intuitively, with categories like 'obstetrics' and 'geriatrics' we should be able to separate these categories perfectly. And indeed we are.

#+BEGIN_SRC ipython
df_female = df_25_70[df_25_70['target'].isin(['25V','70V'])]

y_f = df_female.target

subset_care_categories = ['physiotherapy', 'obstetrics', 'geriatrics', 'pharmaceuticals']
X_f = df_female[subset_care_categories]

scatter_matrix(
    X_f,  # drop the none feature columns
    figsize=(12, 12),                                             # square figuresize for the matrix
    alpha=0.5,                                                    # alpha of 0.5 to see overlapping dots
    s=50,                                                         # fixed size of 50
    c=[plt.cm.get_cmap('rainbow', 4)(idx) for idx in df_female['target'].cat.codes],
    diagonal='kde');                                              # diagonal line are feature distributions


#+END_SRC

#+RESULTS:
:RESULTS:

<matplotlib.figure.Figure at 0x1189589e8>
[[file:ipython-inline-images/ob-ipython-280755085f3c07292bb99cc7373d2c0b.png]]
:END:


------------

*Exercise*

Use the $k$-neighbors method from above on the data $X_f,y_f$. That is, split the data into test and training sets, fit the model on the training data and then show that on the test data you get a score close to 100%.

#+BEGIN_SRC ipython

#+END_SRC

------------

